#!/usr/bin/env node

/**
 * EmailJS Setup Script
 * This script helps configure EmailJS for the Chimeo platform
 */

import readline from 'readline';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üîß EmailJS Setup for Chimeo Platform');
console.log('=====================================\n');

console.log('This script will help you configure EmailJS for email notifications.');
console.log('You will need to create an EmailJS account at https://www.emailjs.com/\n');

console.log('üìã Setup Checklist:');
console.log('1. Create EmailJS account at https://www.emailjs.com/');
console.log('2. Create an email service (Gmail, Outlook, etc.)');
console.log('3. Create email templates');
console.log('4. Get your Public Key from Account > General');
console.log('5. Run this script to configure your environment\n');

async function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function setupEmailJS() {
  try {
    console.log('üìß EmailJS Configuration\n');
    
    const serviceId = await askQuestion('Enter your EmailJS Service ID (e.g., service_abc123): ');
    const templateId = await askQuestion('Enter your EmailJS Template ID (e.g., template_org_request): ');
    const publicKey = await askQuestion('Enter your EmailJS Public Key (e.g., user_abc123def456): ');
    const adminEmail = await askQuestion('Enter Platform Admin Email (default: jed@onetrack-consulting.com): ') || 'jed@onetrack-consulting.com';
    
    // Validate inputs
    if (!serviceId || !templateId || !publicKey) {
      console.log('‚ùå Error: All EmailJS credentials are required');
      process.exit(1);
    }
    
    // Create .env file
    const envContent = `# EmailJS Configuration
# Generated by setup-emailjs.js

VITE_EMAILJS_SERVICE_ID=${serviceId}
VITE_EMAILJS_TEMPLATE_ID=${templateId}
VITE_EMAILJS_PUBLIC_KEY=${publicKey}
VITE_PLATFORM_ADMIN_EMAIL=${adminEmail}
`;
    
    fs.writeFileSync('.env', envContent);
    console.log('\n‚úÖ Environment file created: .env');
    
    // Update emailService.js with the new values
    const emailServicePath = path.join(__dirname, 'src', 'services', 'emailService.js');
    let emailServiceContent = fs.readFileSync(emailServicePath, 'utf8');
    
    // Update the default values
    emailServiceContent = emailServiceContent.replace(
      /this\.serviceId = import\.meta\.env\.VITE_EMAILJS_SERVICE_ID \|\| 'service_chimeo'/,
      `this.serviceId = import.meta.env.VITE_EMAILJS_SERVICE_ID || '${serviceId}'`
    );
    
    emailServiceContent = emailServiceContent.replace(
      /this\.templateId = import\.meta\.env\.VITE_EMAILJS_TEMPLATE_ID \|\| 'template_org_request'/,
      `this.templateId = import.meta.env.VITE_EMAILJS_TEMPLATE_ID || '${templateId}'`
    );
    
    emailServiceContent = emailServiceContent.replace(
      /this\.publicKey = import\.meta\.env\.VITE_EMAILJS_PUBLIC_KEY \|\| 'YOUR_EMAILJS_PUBLIC_KEY'/,
      `this.publicKey = import.meta.env.VITE_EMAILJS_PUBLIC_KEY || '${publicKey}'`
    );
    
    fs.writeFileSync(emailServicePath, emailServiceContent);
    console.log('‚úÖ Email service updated with new credentials');
    
    console.log('\nüéâ EmailJS Setup Complete!');
    console.log('\nüìã Next Steps:');
    console.log('1. Restart your development server: npm run dev');
    console.log('2. Test email functionality by submitting an organization request');
    console.log('3. Check browser console for email sending logs');
    console.log('4. Verify emails are received');
    
    console.log('\nüß™ Test Commands:');
    console.log('- Open browser console and run: window.testEmail()');
    console.log('- Or check the email service status in the console');
    
    console.log('\nüìö Documentation:');
    console.log('- EmailJS Setup Guide: EMAILJS_SETUP.md');
    console.log('- EmailJS Dashboard: https://dashboard.emailjs.com/');
    
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Run setup
setupEmailJS();
